openapi: 3.0.0
info:
  version: 1.0.0
  title: Laravel
servers:
  -
    description: dev
    url: 'http://192.168.1.77'
paths:
  /api/tasks:
    get:
      tags:
        - api
      parameters:
        -
          name: 'filters[status]'
          in: query
          required: false
          schema:
            nullable: true
            oneOf:
              -
                $ref: '#/components/schemas/TaskStatusEnum'
        -
          name: 'filters[priority]'
          in: query
          required: false
          schema:
            nullable: true
            oneOf:
              -
                $ref: '#/components/schemas/TaskPriorityEnum'
        -
          name: 'filters[userId]'
          in: query
          required: false
          schema:
            type: integer
            nullable: true
        -
          name: 'pagination[page]'
          in: query
          required: false
          schema:
            type: integer
        -
          name: 'pagination[limit]'
          in: query
          required: false
          schema:
            type: integer
      responses:
        '422':
          description: Unprocessable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Unexpected error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: 'Validation error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
    post:
      tags:
        - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreTaskRequest'
      responses:
        '422':
          description: Unprocessable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Unexpected error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: 'Validation error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '200':
          description: basic-response
  '/api/tasks/{id}':
    get:
      tags:
        - api
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: integer
            pattern: null
      responses:
        '422':
          description: Unprocessable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Unexpected error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/tasks/{id}/status':
    put:
      tags:
        - api
      parameters:
        -
          name: taskId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskStatusRequest'
      responses:
        '422':
          description: Unprocessable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Unexpected error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: 'Validation error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '200':
          description: basic-response
  '/api/tasks/{id}/comments':
    post:
      tags:
        - api
      parameters:
        -
          name: taskId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreTaskCommentRequest'
      responses:
        '422':
          description: Unprocessable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Unexpected error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: 'Validation error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
components:
  schemas:
    JsonResponse:
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          nullable: true
        errors:
          nullable: true
      type: object
    ValidationErrorResponse:
      allOf:
        -
          $ref: '#/components/schemas/JsonResponse'
        -
          properties:
            success:
              default: false
            message:
              default: 'Validation Error.'
            data:
              default: null
            errors:
              additionalProperties:
                type: array
                items:
                  type: string
              example:
                field1:
                  - 'is required'
                field2:
                  - 'is required'
              nullable: false
    ErrorResponse:
      allOf:
        -
          $ref: '#/components/schemas/JsonResponse'
        -
          properties:
            success:
              default: false
            message:
              default: Unprocessable.
            data:
              default: null
            errors:
              type: array
              items:
                type: string
              example:
                - 'Some error'
    TaskStatusEnum:
      type: string
      enum:
        - new
        - in_progress
        - completed
        - cancelled
    TaskPriorityEnum:
      type: string
      enum:
        - high
        - normal
        - low
    StoreTaskRequest:
      required:
        - title
        - priority
        - user_id
      properties:
        title:
          type: string
        priority:
          $ref: '#/components/schemas/TaskPriorityEnum'
        user_id:
          type: integer
          nullable: true
        description:
          type: string
          nullable: true
      type: object
    UpdateTaskStatusRequest:
      required:
        - status
        - user_id
      properties:
        status:
          $ref: '#/components/schemas/TaskStatusEnum'
        user_id:
          type: integer
      type: object
    StoreTaskCommentRequest:
      required:
        - comment
        - user_id
      properties:
        comment:
          type: string
        user_id:
          type: integer
      type: object
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: api_token
